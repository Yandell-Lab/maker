#!/bin/bash
# -*- shell-script -*-
 
##################################################
# addto: make a colon separated variable
# Usage:  FOO=$(addto FOO foo bar ...)
addto()
{
  local name=$1
  shift 
  local var
  eval "var=\$$name"
  local result=$var

  for i in "$@" ; do
    if [ -n "$i" ]; then
      if [ -n "$result" ]; then
	result=$result:$i
      else
	result=$i
      fi
    fi
  done
  
  echo $result
}

########################################################################
# Figure out which system we are on.
########################################################################
nlocal=$(hostname -f)
nA=($(builtin echo "$nlocal" | tr '.' ' '))
first=${nA[0]}
SYSHOST=${nA[1]}

if [ "$first" = spur ]; then
  SYSHOST=ranger
fi

fqdn="$SYSHOST.tacc.utexas.edu"

if [ $SYSHOST = "ranger" ]; then
  replacement=".${SYSHOST}.tacc.utexas.edu"
fi

ADMIN_stampede="/fixMe/fixMe"
ADMIN_ranger="/share/moduleData/reverseMapD"
ADMIN_ls4="/home1/moduleData/reverseMapD"
ADMIN_longhorn="/share/tacc_admin/reverseMapD"
eval "pe_mapD=\$ADMIN_$SYSHOST"
CPN_stampede=16
CPN_ranger=16
CPN_ls4=12
CPN_longhorn=8

eval "CPN=\$CPN_$SYSHOST"

NUMCORES=$((CPN*2))

## Look through all the arguments to ibrun.  If the user asked for help (-h)
## print the help and then exit immediately.
if [ "$1" == "-h" -o "$1" == "--help" -o "$1" == "-help" ]; then
  ## User asked for a help message.  Exit after printing it.
  echo "Basic Usage: "
  echo "$0 ./executable <execuable_opions>"
  echo ""
  echo "In normal usage, pass only the MPI executable name and any"
  echo "options the executable requires."
  echo ""
  echo ""
  echo "Advanced Usage:"
  echo "$0 -n <number of processors> -o <offset into processor hostlist> executable <execuable_opions>"
  echo ""
  echo "In this case you can specify a subset of processors from the"
  echo "list of all hosts on which to run the executable, and an offset into the list"
  echo "of processors to start numbering.  This allows you to e.g. launch two different"
  echo "exectuables on two different subsets of the available hosts."
  echo ""
  echo "Example, parallel environment -pe ${CPN}way $NUMCORES, executable 'mpihello'"
  echo " We can do:"
  echo " $0 -n $CPN -o 0  ./mpihello &"
  echo " $0 -n $CPN -o $CPN ./mpihello &"
  echo " wait"
  echo ""
  echo "The first call launches a ${CPN}-processor job on the first $CPN hosts in the hostfile,"
  echo "The second call launches a ${CPN}-processor job on the second $CPN hosts in the hostfile."
  echo "The shell 'wait' command waits for all processes to finish before the shell exits."
  exit 0
fi

echo "TACC: Starting up job $JOB_ID"



# Get the PE hostfile, number of slots and wayness from the environment
pe_hostfile=$PE_HOSTFILE
pe_slots=$NSLOTS

pe_startTime=`date +%s`

pe_numNodes=`wc -l $PE_HOSTFILE`

# Cut out the "way" string and just get the wayness number.
pe_ppn=`echo $PE | sed -e 's/way//g;'`

srq_size=2048
default_time_out=23
  
# Find out which MPI stack we're using
MODE=$TACC_MPI_GETMODE
if [ -z $MODE ]; then
  MODE=`getmode.sh`
fi 

# Set our files and directories
home_sge_dir="$HOME/.sge"
if [ ! -d $home_sge_dir ]; then
  mkdir -p $home_sge_dir
fi

# FYI: mktemp generates a filename with random numbers/letters
# replacing the XXX
hostfile_tacc=`mktemp $home_sge_dir/job.$JOB_ID.hostlist.XXXXXXXX`
nslotsfile_tacc=`mktemp $home_sge_dir/job.$JOB_ID.info.XXXXXXXX`

# Just to be sure, remove the host and nslots files in case they
# already exist.  This should never happen...
if [ -f $nslotsfile_tacc ]; then
  rm $nslotsfile_tacc
fi

if [ -f $hostfile_tacc ]; then
  rm $hostfile_tacc
fi

IBRUN_LD_PRELOAD=$(addto IBRUN_LD_PRELOAD "$LD_PRELOAD")
unset LD_PRELOAD

if [ x$TACC_DARSHAN_LIB != "x" ]; then
  IBRUN_LD_PRELOAD=$(addto IBRUN_LD_PRELOAD ${TACC_DARSHAN_FORTRAN_LIB} ${TACC_DARSHAN_LIB})
fi

if [ -n "$IBRUN_LD_PRELOAD" ]; then
  MVAPICH_LD_PRELOAD="LD_PRELOAD=$IBRUN_LD_PRELOAD"
  OPENMPI_LD_PRELOAD="-x LD_PRELOAD=$IBRUN_LD_PRELOAD"
fi

# Build hostfile for mvapich2 
if [ x"$MODE" == xmvapich2_mpd ]; then

  export MV2_SRQ_SIZE=$srq_size
  export MV2_DEFAULT_TIME_OUT=$default_time_out
  echo "TACC: Setting up parallel environment for MVAPICH-2 MPD."

# Don't use the full hostname
  sed -e 's/^\([ci][0-9]\+-[0-9]\+\|ivis[0-9a-z]\+\).'$fqdn' \+\([0-9]\+\).*/\1:'$pe_ppn'/g' $pe_hostfile | sort -n > $hostfile_tacc
  num_mpds=`wc -l $hostfile_tacc| cut -d' ' -f1`
  local_ncpus=$pe_ppn
  slots=0
  for i in `cat $hostfile_tacc | cut -d: -f2`; do
    slots=$(( $slots + $i ))
  done
  echo -n $slots > $nslotsfile_tacc
  mpdboot --rsh=tacc_rsh --file=$hostfile_tacc -n $num_mpds --ncpus=$local_ncpus --verbose --maxbranch=16

  if [ $? -ne 0 ]; then
    echo "TACC: MPD setup failed. Exiting."
    exit 1
  fi



# Build hostfile for mvapich1 and mvapich2
elif [ x"$MODE" == "xmvapich1_ssh" -o x"$MODE" == "xmvapich1_devel_ssh" -o x"$MODE" == "xmvapich2_ssh" ]; then

  echo "TACC: Setting up parallel environment for MVAPICH ssh-based mpirun."

  # Default TACC MPI Parameters
  # VIADEV_SRQ_SIZE is the maximum number of work requests posted
  # to the Shared Receive Queue initially. This value will dynamically
  # re-size up to VIADEV_SRQ_MAX_SIZE.
  # MV1 default was 256 at one point in time.
  if [ x"$MODE" == "xmvapich1_ssh" -o x"$MODE" == "xmvapich1_devel_ssh" ]; then
      export VIADEV_SRQ_SIZE=$srq_size
      export VIADEV_DEFAULT_TIME_OUT=$default_time_out
  elif [ x"$MODE" == "xmvapich2_ssh" ]; then
      export MV2_SRQ_SIZE=$srq_size
      export MV2_DEFAULT_TIME_OUT=$default_time_out
  fi

  # Don't be concerned, the following two lines are correct!
  # Setting IFS redefines the input field separator, making our for-loop below
  # a little easier.
  IFS='
'
  #------------------------------------------------------------ 
  # Build the MVAPICH1 hostfile: allow for Block or Cyclic node 
  # distributions (default is blocked)
  #------------------------------------------------------------ 

  # Process contents of SGE hostfile to make nice hostnames for the mvapich hostfile.
  for l in `cat $pe_hostfile`; do
    h=`echo $l| sed -e 's/^\([ci][0-9]\+-[0-9]\+\|ivis[0-9a-z]\+\).'$fqdn' \+\([0-9]\+\).*/\1'$replacement'/g'`

    # Put each hostname into the hostfile $pe_ppn (wayness) times.
    for i in $(seq 1 $pe_ppn); do
	echo $h >> $hostfile_tacc
    done

  done
  cat $hostfile_tacc | wc -l > $nslotsfile_tacc

  if [ x"$NO_HOSTSORT" == x1 ];then
    echo " "
    echo "TACC: Disabling internal hostfile modification...(using SGE default)"
    echo " "
  else
      sort -n -o $hostfile_tacc $hostfile_tacc
  fi

  unset IFS



# Build hostfile for OpenMPI
elif [ x"$MODE" == "xopenmpi_ssh" -o x"$MODE" == "xopenmpi_1.3_ssh" ]; then
  echo "TACC: Setting up parallel environment for OpenMPI mpirun."
  # Don't be concerned, the following two lines are correct!
  # Setting IFS redefines the input field separator, making our for-loop below
  # a little easier.
  IFS='
'
  for l in `cat $pe_hostfile`; do
    h=`echo $l| sed -e 's/^\([ci][0-9]\+-[0-9]\+\|ivis[0-9a-z]\+\).'$fqdn' \+\([0-9]\+\).*/\1'$replacement'/g'`
    echo "$h slots=$pe_ppn" >> $hostfile_tacc
  done
  unset IFS
  slots=0
  for i in `cat $hostfile_tacc | cut -d= -f2`; do
    slots=$(( $slots + $i ))
  done
  echo -n $slots > $nslotsfile_tacc


# Some other MPI stack? fail.
else
  echo "TACC: Could not determine MPI stack. Exiting!"
  exit 1
fi


echo "TACC: Setup complete. Running job script."

# See if the user set his own NSLOTS variable, and respect that.
if [ x"$MY_NSLOTS" == "x" ]; then
  if [ -f $nslotsfile_tacc ]; then
    MY_NSLOTS=`cat $nslotsfile_tacc`
  else
    MY_NSLOTS=$NSLOTS
  fi
fi

## Remove me
#echo "MY_NSLOTS=$MY_NSLOTS"



#------------------------------
# Let's finally launch the job
#------------------------------

# Check for some command line switches before the executable
stop_parsing=0

while [ $stop_parsing -ne 1 ]
do
  case "$1" in
    -np)
      shift
      MY_NSLOTS=$1
      shift
      ;;
    -n)
      ## This is how many hosts to use from the main hostfile.
      ## Can be as many as $MY_NSLOTS.
      # echo "Found -n switch to ibrun."
      shift
      # echo "Argument of -n is $1"
      ibrun_n_option=$1
      shift
      ;;
      
    -o)
      ## This is the offset into the host file where we begin
      ## to grab hosts.
      # echo "Found -o switch to ibrun."
      shift
      # echo "Argument of -o is $1"
      ibrun_o_option=$1
      shift
      ;;

     *)
      ## Default case
      # echo "Reached default case, we assume this is the executable..."
      cmd=$1
      shift
      stop_parsing=1
      ;;
  esac
done

## Do some error checking of the user's arguments to ibrun.
res=0

## If -n is set, must also set -o, and vice-versa.  This way we don't
## have to worry about cases where one is set and the other is not.
#
# Is -n set and -o not set?
if [ x"$ibrun_n_option" != "x" -a x"$ibrun_o_option" == "x" ]; then
  echo "ERROR: The -n option to ibrun was set but -o was not."
  res=1
fi

# Or, is -n unset while -o is?
if [ x"$ibrun_n_option" == "x" -a x"$ibrun_o_option" != "x" ]; then
  echo "ERROR: The -o option to ibrun was set but -n was not."
  res=1
fi

# Exit now if either of the preceding 2 tests failed.
if [ $res -ne 0 ]; then
  echo "TACC: MPI job exited with code: $res"
  exit 1
fi



  


## If set, check -n and -o options for non-numeric input.
if [ x"$ibrun_n_option" != "x" ]; then
  echo $ibrun_n_option | grep "[^0-9]" > /dev/null 2>&1
  if [ "$?" -eq "0" ]; then
    echo "ERROR: Non-numeric argument passed for -n."
    res=1
  fi
  
  echo $ibrun_o_option | grep "[^0-9]" > /dev/null 2>&1
  if [ "$?" -eq "0" ]; then
    echo "ERROR: Non-numeric argument passed for -o."
    res=1
  fi
fi

## Exit in case of non-numeric input.
if [ $res -ne 0 ]; then
  echo "TACC: MPI job exited with code: $res"
  exit 1
fi
            
								

if [ x"$ibrun_n_option" != "x" ]; then
    ## Double check user's -n value: it can't be larger than MY_NSLOTS
    if [ $ibrun_n_option -gt $MY_NSLOTS ]; then
      echo "ERROR: -n option requested $ibrun_n_option hosts, only $MY_NSLOTS are available!"
      res=1
    fi
    
    ## Double check user's -o value: it can't be larger than MY_NSLOTS
    if [ $ibrun_o_option -gt $MY_NSLOTS ]; then
      echo "ERROR: -o option requested $ibrun_o_option offset, only $MY_NSLOTS are available!"
      res=1
    fi

    ## Double check to see that the requested offset+the number of processors does not
    ## put us over the total number of hosts.  (Don't allow wrap-around.)
    slots_max=$(( $ibrun_o_option + $ibrun_n_option ))
    if [ $slots_max -gt $MY_NSLOTS ]; then
      echo "ERROR: Number of hosts (requested through -n) plus offset (via -o) exceeds the total number of slots available."
      res=1
    fi

    ## Offset of zero (-o 0) is OK but requesting 0 hosts (-n 0) doesn't really make sense...
    if [ $ibrun_n_option -eq 0 ]; then
      echo "ERROR: Requesting zero hosts (-n 0) is not allowed."
      res=1
    fi
fi

## Exit in case of invalid -n or -o option.
if [ $res -ne 0 ]; then
  echo "TACC: MPI job exited with code: $res"
  exit 1
fi


if [ -n "$LMOD_CMD" ]; then
  export LMOD_CMD=$LMOD_CMD
fi

checkExec -m $pe_mapD $cmd "$@"

# Double check the executable name specified to ibrun
fullcmd=`which $cmd 2>/dev/null`
if [ $? -ne 0 ]; then
#  echo "$cmd not found"
#  exit 1
    fullcmd="$cmd"
fi

if [ -n "$TACC_IBWRAPPER_DEBUG" ]; then
  exit
fi


## Modify $hostfile_tacc if user passed special options to ibrun
if [ x"$ibrun_n_option" != "x" ]; then

  # Handle ssh mvapich 
  if [ x"$MODE" == "xmvapich1_ssh" -o x"$MODE" == "xmvapich1_devel_ssh" -o x"$MODE" == "xmvapich2_ssh" ]; then
    if [ x"$ibrun_n_option" != x -a "x$MODE" == xmvapich1_ssh ]; then
      rem=$(($ibrun_o_option % $CPN))
      if [ "$rem" != 0 ]; then
        export VIADEV_USE_AFFINITY=0
        export VIADEV_ENABLE_AFFINITY=0
      fi
    fi
    if [ x"$ibrun_n_option" != x -a "x$MODE" == xmvapich2_ssh ]; then
      rem=$(($ibrun_o_option % $CPN))
      if [ "$rem" != 0 ]; then
        export MV2_USE_AFFINITY=0
        export MV2_ENABLE_AFFINITY=0
      fi
    fi

    # Create a temporary file for the subset of hosts which we will run on.
    subhostfile_tacc=`mktemp $home_sge_dir/job.$JOB_ID.subhostlist.XXXXXXXX`

    # Cut the subset of hosts from the orig hostfile and put them in the subhostfile.
    cat $hostfile_tacc | tail -n $(( $MY_NSLOTS - $ibrun_o_option )) | head -n $ibrun_n_option > $subhostfile_tacc

  # Handle openmpi mpi starter
  elif [ x"$MODE" == "xopenmpi_ssh" -o x"$MODE" == "xopenmpi_1.3_ssh" ]; then
    # Create a temporary file for the subset of hosts which we will run on.
    subhostfile_tacc=`mktemp $home_sge_dir/job.$JOB_ID.subhostlist.XXXXXXXX`

    #Calculate the starting node and ending node
    s_node=$(( $ibrun_o_option/$pe_ppn ))
    e_node=$(( ($ibrun_o_option+$ibrun_n_option)/$pe_ppn ))
    m_nodes=$(( $e_node - $s_node - 1 ))

    #Calculate the # of tasks on starting node and ending node
    s_tasks=$(( $pe_ppn - ($ibrun_o_option - ($s_node*$pe_ppn)) ))
    e_tasks=$(( $ibrun_o_option + $ibrun_n_option - ($e_node*$pe_ppn) ))
    # Cut the subset of hosts from the orig hostfile and put them in the subhostfile.

    #Handle the first node
    cat $hostfile_tacc | head -n $(( $s_node + 1 )) | tail -1 | sed -e"s/=[0-9]\+$/=${s_tasks}/" >  $subhostfile_tacc
    #Handle the in between nodes
    cat $hostfile_tacc | head -n $e_node   | tail -n $m_nodes  >>  $subhostfile_tacc
    #Handle the last node
    cat $hostfile_tacc | head -n $(( $e_node + 1 )) | tail -1 | sed -e"s/=[0-9]\+$/=${e_tasks}/" >> $subhostfile_tacc

  fi

  # Move the subhostfile in place of the hostfile
  /bin/mv $subhostfile_tacc $hostfile_tacc

  ## Set MY_NSLOTS to the number of requested processors so the mpirun commands below
  ## use the right number of CPUs.
  MY_NSLOTS=$ibrun_n_option
fi

echo "TACC: starting parallel tasks..."

pe_fn=`mktemp $home_sge_dir/job.$JOB_ID.usage.XXXXXXXX`
mv $pe_fn $pe_fn.lua
pe_fn=$pe_fn.lua

parseLDD --map $pe_mapD --start $pe_startTime --runTime 0.0 --fn $pe_fn $fullcmd "$@"



# Launch a job with mvapich2+MPD's mpiexec command
if [ x"$MODE" == "xmvapich2_mpd" ]; then

  mpiexec -machinefile $hostfile_tacc -np $MY_NSLOTS $fullcmd "$@"
  res=$?

# Launch a job with mvapich1 and 2+ssh mpirun_rsh command
elif [ x"$MODE" == "xmvapich1_ssh" -o x"$MODE" == "xmvapich1_devel_ssh" -o x"$MODE" == "xmvapich2_ssh" ]; then

    # How sweet is this?  MVAPICH1 AND MVAPICH2 using the same baby.

    TACC_ENV=`build_env.pl`
    $MPICH_HOME/bin/mpirun_rsh -np $MY_NSLOTS -hostfile $hostfile_tacc $MY_MPIRUN_OPTIONS $TACC_ENV $MVAPICH_LD_PRELOAD $fullcmd "$@"
    res=$?


elif [ x"$MODE" == "xopenmpi_ssh" -o  x"$MODE" == "xopenmpi_1.3_ssh" ]; then

    TACC_ENV=`env | cut -d= -f1 | grep -v '\b_\b' | perl -pe 's/(.*)\n/ -x \1/m'`
    #TACC_OPENMPI_OPTIONS="--mca btl sm,openib,self --mca btl_openib_ib_timeout $default_time_out --mca btl_openib_use_srq 1 --mca btl_openib_use_rd_max $srq_size"
    TACC_OPENMPI_OPTIONS="--mca btl ^openib"

    mpirun -np $MY_NSLOTS -hostfile $hostfile_tacc --mca oob_tcp_if_include ib0 $TACC_OPENMPI_OPTIONS $MY_OPENMPI_OPTIONS --prefix $MPICH_HOME $TACC_ENV $OPENMPI_LD_PRELOAD $fullcmd "$@"
    res=$?


# The mode was not correctly set, set fail.  Probably can't get here
# because we would have already failed during machinefile setting time.
else
    echo -e "TACC: Could not determine which MPI stack to use.\nTACC:Exiting.\n"
    res=1
fi


pe_endTime=`date +%s`
pe_runTime=`echo "$pe_endTime - $pe_startTime" | bc -q`

parseLDD --map $pe_mapD --start $pe_startTime --runTime $pe_runTime --fn $pe_fn $fullcmd "$@"

if [ $res -ne 0 ]; then
  echo "TACC: MPI job exited with code: $res"
fi




#-----------------------
# Job tear-down/cleanup
#-----------------------

echo "TACC: Shutting down parallel environment."

if [ x"$MODE" == "xmvapich2_mpd" ]; then
    mpdallexit 
elif [ x"$MODE" == "xmvapich1_ssh" -o x"$MODE" == "xmvapich2_ssh" ]; then
    /bin/true
elif [ x"$MODE" == "xmvapich1_devel_ssh" ]; then
    /bin/true
elif [ x"$MODE" == "xopenmpi_ssh" -o x"$MODE" == "xopenmpi_1.3_ssh" ]; then
    /bin/true
else
    echo "TACC: You should not see this message! Please contact TACC consulting and send us your jobscript."
    exit 1
fi

if [ x"$TACC_KEEP_FILES" != "x" ]; then
    if [ -f $nslotsfile_tacc ]; then
	rm $nslotsfile_tacc
    fi
    if [ -f $hostfile_tacc ]; then
	rm $hostfile_tacc
    fi
fi

echo "TACC: Shutdown complete. Exiting." 

exit $res



