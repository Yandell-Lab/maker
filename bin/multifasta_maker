#!/usr/bin/perl -w
use Getopt::Long;

$| = 1;

my $usage = "
Usage:

        multifasta_maker [options] <genome_file> <maker_opts.ctl> <maker_bopts.ctl> <maker_exe.ctl>

        Unlike maker, multifasta_maker requires you to always supply all four command line
        arguments.

        The genome file identified in the first argument must be in fasta format.

        The last three arguments are user control files that specify how maker should behave.
        Please see maker documentation to learn more about control file format.

        It is important to note that maker does not try and recalculated data that it has
        already calculated.  For example, if you run an analysis twice on the same fasta file
        you will notice that maker does not rerun any of the blast analyses but instead uses
        the blast analyses stored from the previous run.  To force maker to rerun all
        analyses, use the -f flag.

Options:

        -R Turns repeat masking off (* See Warning)
        -f Forces maker to rerun all analyses
        -h Help

Warning:

        *When using the -R flag, maker expects that the input genome file is already masked.
         This means that if your genome file contains lower case characters, maker will
         consider those characers to be soft masked.                                                                                                                                                                                                                                                                                    
";

my $opt_R;
my $opt_f;

GetOptions ( "R" => \$opt_R,
	     "f" => \$opt_f,
	     "help|?" => sub{ print $usage; exit;}
	   );

if ($#ARGV < 3) {
    die $usage;
}

my $fasta_file = shift @ARGV;
my @cf = @ARGV;

my %seq = read_seq($fasta_file);

while (my $k = each %seq) {
    $fn = (split(/\s+|\t+|\n+/, $k))[0];
    my $qfile = "$fn\.fasta";
    open SFILE, ">$qfile" or die $!;
    print SFILE ">",$k,"\n",$seq{$k},"\n";
    close SFILE;
    $command = "maker";
    $command .= " -R" if ($opt_R);
    $command .= " -f" if ($opt_f);
    $command .= " $fn\.fasta $cf[0] $cf[1] $cf[2]";

    system("$command");
}

sub read_seq{
    my $infile = shift @_;
    my %hash = ();
    open SEQ, "<$infile" or die $!;
    my $header = '';
    while (my $line = <SEQ>) {
	chomp($line);
	if ($line =~ m/>(.+)/) {
	    $header = $1;
	    $hash{$header} = '';
	}else {
	    $hash{$header} = join("", $hash{$header},$line);
	}
    }
    close SEQ;
    return %hash;
}
