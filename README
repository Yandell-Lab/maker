***MAKER Documentation***

INSTALLATION INSTUCTIONS FOR MAKER

To install maker, you will first need to install the following programs:

PERL 5.8.0 or higher
BioPerl 1.5 (www.bioperl.org)
Wu-BLAST 2.0 (blast.wustl.edu)
SNAP version 2006-07-28 (homepage.mac.com/iankorf)
RepeatMasker 3.1.6 (www.repeatmasker.org)
Exonerate 1.4 (www.ebi.ac.uk/~guy/exonerate)

Notes: 
1) RepeatMaker requires Wu-BLAST, so please install Wu-BLAST before installing RepeatMaker
2) Exonerate Binaries can be downloaded from the website.  If you have Mac OSX, however, binaries are only available for version 1.0.  This verion will work too.  If you would like to compile exonerate, it requires GLIB, a C-library, that has a link from the exonerate website.  If you have Mac OSX, this can downloaded using FINK.
3) RepeatMasker requires a repeat library file, which is downloaded from Repbase(http://www.girinst.org/), this is explained on the RepeatMasker website.
4) Please note the location of all of the programs that you have installed.  You will need this information in the maker.exe file, one of MAKER's 3 control files.


Now that you have all the necessary programs installed, MAKER can be unpacked using:

tar xvfz maker.tar.gz

You will create a directory called maker with 4 sub directories:
data  - contains some sample data used to make sure everything works
config - contains the 3 configuration files for MAKER
	maker_exe.ctl - contains the path information for needed program
	maker_bopts - contains the optional settings for the various 
		needed programs
	maker_opts.ctl - contains all the optional information for MAKER, 
		including file locations for data files.

These files will have to be examined for changes in order to use MAKER for your specific data

bin - contains the maker code.

lib - contains all the necessary perl libaries for MAKER.



You must also set some environmental variables:

for tcsh:

setenv CGL_SO_SOURCE where_maker_dir_is/lib/CGL/so.obo 
setenv CGL_GO_SOURCE where_maker_dir_is/lib/CGL/gene_ontology.obo
setenv PERL5LIB where_maker_is_installed/lib:where_bioperl_is_installed:where_snap_is_installed
setenv WUBLASTMAT where_blast_is_installed/matrix
setenv ZOE where_snap_installation_folder_is
setenv WUBLASTFILTER where_blast_is_installed/filter

for bash:

export CGL_SO_SOURCE=where_maker_dir_is/lib/CGL/so.obo
export CGL_GO_SOURCE=where_maker_dir_is/lib/CGL/gene_ontology.obo
export PERL5LIB=where_maker_is_installed/lib:where_bioperl_is_installed:where_snap_is_installed
export WUBLASTMAT=where_blast_is_installed/matrix
export ZOE=where_snap_installation_folder_is
export WUBLASTFILTER=where_blast_is_installed/filter


RUNNING MAKER

There are 2 ways to run maker.


If you have the name of the desired genome file in the maker_opts.ctl file:

location_of_maker/maker maker_exe.ctl maker_opts.ctl maker_bopts.ctl

Otherwise the location of the genome file can be set at the command line as the first argument:

location of maker/maker genome_file.fasta maker_exe.ctl maker_opts.ctl maker_bopts.ctl


RUNNING MAKER WITH EXAMPLE DATA

1) Copy the files in config and data to a temporary directory where you will run an example file.
2) Next you will need to edit maker_exe.ctl to include the path of the programs that you have installed.  See CONFIG FILE EDITING for more information.
3) Then try the following command from your temporary directory:

location_of_maker/maker maker_exe.ctl maker_opts.ctl maker_bopts.ctl

NOTE: if your genome sequence file contains more than one sequence, you will have use multigene_maker,
which will run maker on each of your sequences individually.
To run this program use:

location_of_maker/multigene_maker genomefile.fasta maker_exe.ctl maker_opts.ctl maker_bopts.ctl

MAKER will create the following files/directory:

seqfile.gff - a gff file that can be loaded into GMOD or GBROWSE
seqfile.xml - an xml file that can be loaded into APOLLO

seq_name.maker.transcripts.fasta - a file of the maker transcript sequences
seq_name.maker.snap.transcript.fasta - a file of ab-inito snap transcript sequences
seq_name.maker.proteins.fasta - a file of the maker protein sequences
seq_name.maker.snap.proteins.fasta - a file of ab-inito snap protein sequences

theVoid.seq_name.0 - a directory containing all of the results files produced by maker, including BLAST reports, SNAP output, exonnerate output and the masked sequence

CONFIG FILE EDITING

MAKER has 3 control files for configuration options.

A. maker_exe.ctl - includes information about programs executed by MAKER and how many processors are available to MAKER.

Here is what the standard maker_exe.ctl control file looks like:

setdb:/usr/local/blast/setdb
pressdb:/usr/local/blast/pressdb
blastn:/usr/local/blast/blastn
blastx:/usr/local/blast/blastx
tblastx:/usr/local/blast/tblastx
snap:/usr/local/SNAP/snap
RepeatMasker:/usr/local/RepeatMasker/RepeatMasker
exonerate:/usr/local/bin/exonerate
cpus:2 #max number of cpus to use

Note that for all control files that comments written to help users begin with a pound sign(#).  In addition, options before the colon(:) can not be changed, nor should there be a space before or after the colon.


B. maker_bopts.ctl - includes information about the options for executables run by MAKER

Here is the example maker_bopts.ctl

max_dna_len:100000 #the max DNA length used for sequence similarity comparisons.
percov_blastn:0.80 #Blastn Percent Coverage Threhold EST-Genome Alignments
percid_blastn:0.85 #Blastn Percent Identity Threshold EST-Genome Aligments
eval_blastn:1e-10 #Blastn eval cutoff
bit_blastn:40 #Blastn bit cutoff
percov_blastx:0.50 #Blastx Percent Coverage Threhold Protein-Genome Alignments
percid_blastx:0.40 #Blastx Percent Identity Threshold Protein-Genome Aligments
eval_blastx:1e-5 #Blastx eval cutoff
bit_blastx:30 #Blastx bit cutoff
e_perc_cov:50 #Exonerate Percent Coverage Thresshold EST_Genome Alignments
ep_score_limit:10 #Report  alignments scoring at least this percentage of the maximal score exonerate nucleotide
en_score_limit:10 #Report  alignments scoring at least this percentage of the maximal score exonerate protein
model_org:drosophila #Model Organism use for finding repeat sequences by RepeatMasker
snaphmm:/usr/local/SNAP/HMM/Dm.hmm #SNAP HMM Model - This can be organism specific by iterating MAKER see HMM BUILDING


C. maker_opts.ctl
genome:directory_where_maker_is/maker/data/dpp_contig.fasta #genome sequence file.
protein:directory_where_maker_is/maker/data/dpp_proteins.fasta #protein sequence file.
est:directory_where_maker_is/maker/data/dpp_transcripts.fasta #EST sequence file.
repeat_protein:directory_where_maker_is/maker/data/te_proteins.fasta #A transposable Elements Library
clean_up:0 #remove theVoid directory: 1 = yes, 0 = no
rmlib: #An organism specific Repeat Library
use_seq_dir:0 #place files in same directory as sequence file: 1 = yes, 0 = no, yes is only possibly when the sequence file is in a directory is other than the working directory, then all output files would be put in the same directory at the genome sequence file.
split_hit:10000 #length of the splitting of hits, could be seen as a maximum intron length
snap_flank:200 #number of bp surrounding SNAP predictions used in attempts to extend gene by MAKER
te_remove:1 #Mask Regions with Excess Similarity to Transposable Element Proteins, 1 = yes, 0 = no
single_exon:0 #Includes est hits aligning to single exons, 1 = yes, 0 = no


ADDING UTRs for GBROWSE

* When using APOLLO to visualize gene annotations, UTRs are inferred based on exon and CDS locations.  However GMOD and GBROWSE do not infer the UTR, so to visualize the UTR, you will have to run: add_utr_gff.pl with the following command:

maker2zff.pl <directory>
<directory> is the directory where all of your GFF files are located

each GFF file will have a sister file called sequence.wutr.gff3


HMM BUILDING

A. First you will need to determine the genes used to model future genes, by determining a high quality gene set and then covert them into ZFF format.  You can do this by using maker2zff.pl found in maker/bin.
This program is run with the following command

maker2zff.pl <directory> genome
	
<directory> is the directory where all of your GFF files are located
geneome is the name for the outfile:

genome.ann
genome.dna


C. Next you will use the dna and zff file (genome.ann) to produce a SNAP HMM as described in documation provided by SNAP, which we have provided below:

The first step is to look at some features of the genes:

    fathom genome.ann genome.dna -gene-stats 

Next, you want to verify that the genes have no obvious errors:

    fathom genome.ann genome.dna -validate

You may find some errors and warnings. Check these out in some kind of genome
browser and remove those that are real errors. Next, break up the sequences into
fragments with one gene per sequence with the following command:

    fathom -genome.ann genome.dna -categorize 1000

There will be up to 1000 bp on either side of the genes. You will find
several new files.

    alt.ann, alt.dna (genes with alternative splicing)
    err.ann, err.dna (genes that have errors)
    olp.ann, olp.dna (genes that overlap other genes)
    wrn.ann, wrn.dna (genes with warnings)
    uni.ann, uni.dna (single gene per sequence)

Convert the uni genes to plus stranded with the command:

    fathom uni.ann uni.dna -export 1000 -plus

You will find 4 new files:

    export.aa   proteins corresponding to each gene
    export.ann  gene structure on the plus strand
    export.dna  DNA of the plus strand
    export.tx   transcripts for each gene

The parameter estimation program, forge, creates a lot of files. You probably
want to create a directory to keep things tidy before you execute the program.

    mkdir params
    cd params
    forge ../export.ann ../export.dna
    cd ..

Last is to build an HMM.

    hmm-assembler.pl my-genome params > my-genome.hmm


Lastly, you will want to add the location of your hmm file to your maker_opts.ctl file.
