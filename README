***MAKER Documentation***

INSTALLATION INSTUCTIONS FOR MAKER

To install maker, you will first need to install the following programs:

PERL 5.8.0 or higher
BioPerl 1.5 (www.bioperl.org)
Wu-BLAST 2.0 (blast.wustl.edu)
SNAP version 2006-07-28 (homepage.mac.com/iankorf)
RepeatMasker 3.1.6 (www.repeatmasker.org)
Exonerate 1.4 (www.ebi.ac.uk/~guy/exonerate)

You will also need to install this perl module:

Datastore (http://www.yandell-lab.org/downloads/cgl/Datastore-0.11.tar.gz)


Notes: 
1) RepeatMaker requires Wu-BLAST, so please install Wu-BLAST before installing RepeatMaker
2) Exonerate Binaries can be downloaded from the website.  If you have Mac OSX, however, binaries are only available for version 1.0.  This verion will work too.  If you would like to compile exonerate, it requires GLIB, a C-library, that has a link from the exonerate website.  If you have Mac OSX, this can downloaded using FINK.
3) RepeatMasker requires a repeat library file, which is downloaded from Repbase(http://www.girinst.org/), this is explained on the RepeatMasker website.
4) Please note the location of all of the programs that you have installed.  You will need this information in the maker.exe file, one of MAKER's 3 control files.


Now that you have all the necessary programs installed, MAKER can be unpacked using:

tar xvfz maker.tar.gz

This will create a directory called maker with 5 sub directories:

	bin - contains the maker code.
	lib - contains all the necessary perl libaries for MAKER.
        MPI - contains MPI specific data to configure maker to run on a cluster that supports MPI.
	data  - contains some sample data used to make sure everything works
	config - contains the 3 configuration files for MAKER:

	     1. maker_exe.ctl - contains the path information for needed program
	     2. maker_bopts - contains the optional settings for the various needed programs
	     3. maker_opts.ctl - contains all the optional information for MAKER, including file locations for data files.


These configuration files will have to be examined for changes in order to use MAKER for your specific data



You must also set some environmental variables:

for tcsh:
setenv PERL5LIB where_bioperl_is_installed
setenv WUBLASTMAT where_wublast_is_installed/matrix
setenv ZOE where_snap_installation_folder_is
setenv WUBLASTFILTER where_wublast_is_installed/filter

for bash:
export PERL5LIB=where_bioperl_is_installed
export WUBLASTMAT=where_wublast_is_installed/matrix
export ZOE=where_snap_installation_folder_is
export WUBLASTFILTER=where_wublast_is_installed/filter



MPI MAKER

If you are running maker on an MPI capable cluster, you can install an MPI version of maker by doing the following:

	1. Install standard maker and verify that it runs.
	2. Use cd to change to the MPI subdirectory in the maker instalation folder (i.e. maker/MPI/)
	3. Run Makefile.PL by typing:	 perl Makefile.PL
	4. Compile needed binaries using make by typing:	make
	5. Install mpi_maker and all needed libraries by typing:	make install 	

A new version of maker called mpi_maker should now be installed under maker/bin.

To run mpi_maker, first verify that your mpi environment is initiated, (i.e. using the mpi &, mpd &, or mpdboot command). Now start mpi_maker.

Example:

	mpiexec -n 45 perl maker_directory/maker/bin/mpi_maker genome.fasta maker_opts.ctl maker_bopts.ctl maker_exe.ctl




RUNNING MAKER

Usage:

        maker [options] <genome_file> <maker_opts.ctl> <maker_bopts.ctl> <maker_exe.ctl>

        If you already specified the location for the genome file in the user control files
        you can ommit the first argument, <genome_file>.  The genome file must be in fasta
        format.

        The last three arguments are user control files that specify how maker should behave.
        The program will automatically try and locate the user control files in the current
        working directory if these arguments are not supplied when initializing maker.

        It is important to note that maker does not try and recalculated data that it has
        already calculated.  For example, if you run an analysis twice on the same fasta file
        you will notice that maker does not rerun any of the blast analyses but instead uses
        the blast analyses stored from the previous run.  To force maker to rerun all
        analyses, use the -f flag.

Options:

        -R Turns repeat masking off (* See Warning)
        -f Forces maker to rerun all analyses
        -d Causes output to be written using datastore.  This option is automatically enabled
           if there are more than 1000 fasta entries in the input file.  Output is then
           accessed using the datastore_index file created by the program.
        -h Help

Warning:
      
        *When using the -R flag, maker expects that the input genome file is already masked.
         Also, if your genome file contains lower case characters, maker will consider those
         characers to be soft masked.



EXAMPLES OF RUNNING  MAKER

If you have the name of the desired genome file in the maker_opts.ctl file, you can omit the first arguement:

	Example:	perl maker_directory/bin/maker maker_exe.ctl maker_opts.ctl maker_bopts.ctl


Otherwise the location of the genome file can be set at the command line as the first argument:

	Example:	perl maker_directory/bin/maker genome.fasta maker_exe.ctl maker_opts.ctl maker_bopts.ctl



RUNNING MAKER WITH EXAMPLE DATA

1) Copy the files in the config and data directories to a temporary directory where you will run an example file.
2) Next you will need to edit maker_exe.ctl to include the path of the programs that you have installed.  See CONFIG FILE EDITING for more information.
3) Then try the following command from your temporary directory:

perl maker_directory/bin/maker maker_exe.ctl maker_opts.ctl maker_bopts.ctl

MAKER will create the following files/directory:

seq_name.gff - a gff file that can be loaded into GMOD or GBROWSE
seq_name.xml - an xml file that can be loaded into APOLLO

seq_name.maker.transcripts.fasta - a file of the maker transcript sequences
seq_name.maker.snap.transcript.fasta - a file of ab-inito snap transcript sequences
seq_name.maker.proteins.fasta - a file of the maker protein sequences
seq_name.maker.snap.proteins.fasta - a file of ab-inito snap protein sequences

theVoid.seq_name.0 - a directory containing all of the results files produced by maker, including BLAST reports, SNAP output, exonnerate output and the masked sequence

WARNING:
	*The names of output files are based on sequence ids.  If giving maker a multi-fasta file, it is important to verify that all sequence id are unique, so files are not overwritten.
	*If there are more than 1,000 sequences in a multi-fasta file or you use the -d flag on the command line a datastore structure will be used. see DATASTORE in this document.
        *If sequence ids contain characters that are illegal in file names, those characters will be replaced automatically before building output file names.



DATASTORE

"Many filesystems have performance problems with large numbers of subdirectories in a directory and even when the underlying filesystems handle things gracefully, access via network filesystems can be an issue.  The Datastore modules create a hiearchy of subdirectory layers, starting from a 'base', and mapping end-user's identifiers to the corresponding subdirectory." - quote from http://www.yandell-lab.org/cgl/  (See site for more information on Datastores)

Datastore will be used by maker If there are more than 1,000 sequences in a multi-fasta file or you use the -d flag on the command line.

When datastore is implemented, the output files described above will not appear where you would normally expect them to be.  Instead they will be located in a series of sub-directory under a new base-directory whose name is determined from the input genome file name, i.e. current_working_directory/input_genome_datastore/EE/Af/seq_name/seq_name.gff.  A master_datastore_index file will be made in the current working directory to help you find the output files from each sequence.

The master_datastore_index file contains two columns of text.  The first column shows the sequence identifier from each fasta header, and the second column shows the location of the output files for that sequence. 



CONFIG FILE EDITING

MAKER has 3 control files for configuration options.

A. maker_exe.ctl - includes information about programs executed by MAKER and how many processors are available to MAKER.

Here is what the standard maker_exe.ctl control file looks like:

setdb:/usr/local/blast/setdb
pressdb:/usr/local/blast/pressdb
blastn:/usr/local/blast/blastn
blastx:/usr/local/blast/blastx
tblastx:/usr/local/blast/tblastx
snap:/usr/local/SNAP/snap
RepeatMasker:/usr/local/RepeatMasker/RepeatMasker
exonerate:/usr/local/bin/exonerate
cpus:2 #max number of cpus to use

Note that for all control files that comments written to help users begin with a pound sign(#).  In addition, options before the colon(:) can not be changed, nor should there be a space before or after the colon.


B. maker_bopts.ctl - includes information about the options for executables run by MAKER

Here is the example maker_bopts.ctl

max_dna_len:100000 #the max DNA length used for sequence similarity comparisons.
percov_blastn:0.80 #Blastn Percent Coverage Threhold EST-Genome Alignments
percid_blastn:0.85 #Blastn Percent Identity Threshold EST-Genome Aligments
eval_blastn:1e-10 #Blastn eval cutoff
bit_blastn:40 #Blastn bit cutoff
percov_blastx:0.50 #Blastx Percent Coverage Threhold Protein-Genome Alignments
percid_blastx:0.40 #Blastx Percent Identity Threshold Protein-Genome Aligments
eval_blastx:1e-5 #Blastx eval cutoff
bit_blastx:30 #Blastx bit cutoff
e_perc_cov:50 #Exonerate Percent Coverage Thresshold EST_Genome Alignments
ep_score_limit:10 #Report  alignments scoring at least this percentage of the maximal score exonerate nucleotide
en_score_limit:10 #Report  alignments scoring at least this percentage of the maximal score exonerate protein
model_org:drosophila #Model Organism use for finding repeat sequences by RepeatMasker
snaphmm:/usr/local/SNAP/HMM/Dm.hmm #SNAP HMM Model - This can be organism specific by iterating MAKER see HMM BUILDING


C. maker_opts.ctl
genome:directory_where_maker_is/maker/data/dpp_contig.fasta #genome sequence file.
protein:directory_where_maker_is/maker/data/dpp_proteins.fasta #protein sequence file.
est:directory_where_maker_is/maker/data/dpp_transcripts.fasta #EST sequence file.
repeat_protein:directory_where_maker_is/maker/data/te_proteins.fasta #A transposable Elements Library
clean_up:0 #remove theVoid directory: 1 = yes, 0 = no
rmlib: #An organism specific Repeat Library
use_seq_dir:0 #place files in same directory as sequence file: 1 = yes, 0 = no, yes is only possibly when the sequence file is in a directory is other than the working directory, then all output files would be put in the same directory at the genome sequence file.
split_hit:10000 #length of the splitting of hits, could be seen as a maximum intron length
snap_flank:200 #number of bp surrounding SNAP predictions used in attempts to extend gene by MAKER
te_remove:1 #Mask Regions with Excess Similarity to Transposable Element Proteins, 1 = yes, 0 = no
single_exon:0 #Includes est hits aligning to single exons, 1 = yes, 0 = no



ADDING UTRs for GBROWSE

* When using APOLLO to visualize gene annotations, UTRs are inferred based on exon and CDS locations.  However GMOD and GBROWSE do not infer the UTR, so to visualize the UTR, you will have to run: add_utr_gff.pl with the following command:

maker2zff.pl <directory>
<directory> is the directory where all of your GFF files are located

each GFF file will have a sister file called sequence.wutr.gff3


HMM BUILDING

A. First you will need to determine the genes used to model future genes, by determining a high quality gene set and then covert them into ZFF format.  You can do this by using maker2zff.pl found in maker/bin.
This program is run with the following command

maker2zff.pl <directory> genome
	
<directory> is the directory where all of your GFF files are located
geneome is the name for the outfile:

genome.ann
genome.dna


C. Next you will use the dna and zff file (genome.ann) to produce a SNAP HMM as described in documation provided by SNAP, which we have provided below:

The first step is to look at some features of the genes:

    fathom genome.ann genome.dna -gene-stats 

Next, you want to verify that the genes have no obvious errors:

    fathom genome.ann genome.dna -validate

You may find some errors and warnings. Check these out in some kind of genome
browser and remove those that are real errors. Next, break up the sequences into
fragments with one gene per sequence with the following command:

    fathom -genome.ann genome.dna -categorize 1000

There will be up to 1000 bp on either side of the genes. You will find
several new files.

    alt.ann, alt.dna (genes with alternative splicing)
    err.ann, err.dna (genes that have errors)
    olp.ann, olp.dna (genes that overlap other genes)
    wrn.ann, wrn.dna (genes with warnings)
    uni.ann, uni.dna (single gene per sequence)

Convert the uni genes to plus stranded with the command:

    fathom uni.ann uni.dna -export 1000 -plus

You will find 4 new files:

    export.aa   proteins corresponding to each gene
    export.ann  gene structure on the plus strand
    export.dna  DNA of the plus strand
    export.tx   transcripts for each gene

The parameter estimation program, forge, creates a lot of files. You probably
want to create a directory to keep things tidy before you execute the program.

    mkdir params
    cd params
    forge ../export.ann ../export.dna
    cd ..

Last is to build an HMM.

    hmm-assembler.pl my-genome params > my-genome.hmm


Lastly, you will want to add the location of your hmm file to your maker_opts.ctl file.
