.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Datastore::Base 3"
.TH Datastore::Base 3 "2005-05-01" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Datastore::Base \- A base class for the BDGP's datastore directory
hierarchy tools.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
This class isn't used directly, use a subclass that has the complete
set of bells and whistles.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for Datastore::Base, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.
.Sh "\s-1METHODS\s0"
.IX Subsection "METHODS"
\fI\f(CI\*(C`new\*(C'\fI\fR
.IX Subsection "new"
.PP
.Vb 1
\&  $ds = new Datastore::Base("root" => "/tmp/foo", "depth" => 2);
.Ve
.PP
.Vb 3
\&  This creates a new datastore object.  It has two optional arguments,
\&  the name of the root directory used by the datastore and the depth 
\&  of the datastore subtrees.
.Ve
.PP
\fI\f(CI\*(C`root\*(C'\fI\fR
.IX Subsection "root"
.PP
.Vb 2
\&  $root = $ds->root("/tmp/the/other/directory");
\&  $root = $ds->root();
.Ve
.PP
.Vb 2
\&  This set's the name of the root directory used by the datastore
\&  object.
.Ve
.PP
\fI\f(CI\*(C`depth\*(C'\fI\fR
.IX Subsection "depth"
.PP
.Vb 2
\&  $depth = $ds->depth(1);
\&  $depth = $ds->depth();
.Ve
.PP
.Vb 1
\&  This set's the depth of the datastore's directory hiearchy.
.Ve
.PP
\fI\f(CI\*(C`version\*(C'\fI\fR
.IX Subsection "version"
.PP
.Vb 1
\&  $version = $ds->version();
.Ve
.PP
.Vb 1
\&  Returns the version number for the entire Datastore library.
.Ve
.PP
\fI\f(CI\*(C`mkdir\*(C'\fI\fR
.IX Subsection "mkdir"
.PP
.Vb 1
\&  $success = $ds->mkdir("IDENTIFIER");
.Ve
.PP
.Vb 4
\&  This creates a directory in the datastore that corresponds to the
\&  datastore object $ds.  It runs the system's "mkdir" command w/ the
\&  "-p" switch via perl's system() function.  Returns a true value if
\&  the call succeeds and a false value on failure.
.Ve
.PP
.Vb 2
\&  mkdir() respects the datastore's readonly() attribute, and will 
\&  fail if readonly() is true.
.Ve
.PP
\fI\f(CI\*(C`chdir\*(C'\fI\fR
.IX Subsection "chdir"
.PP
.Vb 1
\&  $success = $ds->chdir("IDENTIFIER");
.Ve
.PP
.Vb 3
\&  Creates a datastore directory for "IDENTIFIER" and change the
\&  process's current working directory to it.  Returns true if the call
\&  succeeds and false on failure.
.Ve
.PP
\fI\f(CI\*(C`cd\*(C'\fI\fR
.IX Subsection "cd"
.PP
.Vb 1
\&  $success = $ds->cd("IDENTIFIER");
.Ve
.PP
.Vb 1
\&  This is simply an alias for chdir().
.Ve
.PP
\fI\f(CI\*(C`pushd\*(C'\fI\fR
.IX Subsection "pushd"
.PP
.Vb 1
\&  $success = $ds->pushd("IDENTIFIER");
.Ve
.PP
.Vb 3
\&  Saves the current working directory in the datastore object and
\&  chdir() to the directory in the "IDENTIFIER" in the datastore.
\&  Returns a true value on success and a false value on failure.
.Ve
.PP
\fI\f(CI\*(C`popd\*(C'\fI\fR
.IX Subsection "popd"
.PP
.Vb 1
\&  $success = $ds->popd();
.Ve
.PP
.Vb 2
\&  Change the process's current working directory to the one most
\&  recently saved by a pushd().  Returns a true value on success and a
.Ve
.PP
\fI\f(CI\*(C`readonly\*(C'\fI\fR
.IX Subsection "readonly"
.PP
.Vb 1
\&  $boolean = $ds->readonly();
.Ve
.PP
.Vb 2
\&  Set's the datastore's notion of whether it is read/write or readonly.
\&  The default is currently read/write ($ds->readonly defaults to 0).
.Ve
.PP
\fI\f(CI\*(C`system\*(C'\fI\fR
.IX Subsection "system"
.PP
.Vb 1
\&  $success = $ds->system("IDENTIFIER", "command")
.Ve
.PP
.Vb 5
\&  Uses $ds->pushd to change the process's current working directory to
\&  the location for "IDENTIFIER" in the datastore, runs "command" using
\&  perl's system() command, and uses $ds->popd change back to the
\&  original directory.  Returns a true value on success and a false
\&  value on failure.
.Ve
.PP
\fI\f(CI\*(C`foreach\*(C'\fI\fR
.IX Subsection "foreach"
.PP
.Vb 12
\&  Iterate over all of the data directories in the datastore, calling a
\&  user supplied reference to a function for each of them.  Returns
\&  false if there was a problem walking the directory tree, true if it
\&  was able to walk the dir tree sucessfully.  The user's function is
\&  passed two arguments, a reference to the datastore being traversed
\&  and the identifier that corresponds to the current directory.  The
\&  function should return a zero exit status on success, and a non-zero
\&  exit code of it's choice to indicate a problem.  If the caller
\&  includes a reference to a list for the status information, then the
\&  code will stuff lists of ["IDENTIFIER", exit_status] pairs into the
\&  list iff the error status is non-zero.  The code snippet gets pass a
\&  reference to the datastore object and the current id.
.Ve
.PP
.Vb 5
\&  Here's a little sample program that makes some directories in a
\&  datastore and then iterates over them calling a little function at
\&    a) prints out some information about where it is 
\&    b) exits with a successful code unless the ID ends in "9"
\&    c) prints out the list of errors that were found.
.Ve
.PP
.Vb 1
\&  #!/usr/bin/env perl
.Ve
.PP
.Vb 2
\&  use Datastore::MD5;
\&  use Cwd;
.Ve
.PP
.Vb 1
\&  $ds = new Datastore::MD5("root" => "/tmp/test-me", "depth" => 2);
.Ve
.PP
.Vb 7
\&  $ds->mkdir("CG1239");
\&  $ds->mkdir("CG1234");
\&  $ds->mkdir("CG0670");
\&  $ds->mkdir("CG0669");
\&  $ds->mkdir("CG0668");
\&  $ds->mkdir("CG0667");
\&  $ds->mkdir("CG0666");
.Ve
.PP
.Vb 2
\&  @status = (); 
\&  $success = $ds->foreach(\e&doit_toit, \e@status);
.Ve
.PP
.Vb 3
\&  print "Errors occurred (ID -- status)\en";
\&  print join "\en", map {"  " . join " -- ",  @{$_}} @status;
\&  print "\en";
.Ve
.PP
.Vb 4
\&  # silly little demo sub that returns an error for any id ending in 9
\&  sub doit_toit {
\&    my($datastore) = shift;
\&    my($id) = shift;
.Ve
.PP
.Vb 8
\&    print "Working on $id: ", getcwd(), "\en";
\&    if ($id =~ m|.*9|) {
\&      return 1;
\&    }
\&    else {
\&      return 0;
\&    }
\&  }
.Ve
.PP
\fI\f(CI\*(C`ioh_foreach\*(C'\fI\fR
.IX Subsection "ioh_foreach"
.PP
.Vb 4
\&  Read a list of identifiers from $ioh, an IO::Handle object, and for
\&  each identifier, call the code specified by the reference in
\&  $code_ref, and if a reference for a list of status values has been
\&  provided, stuff the id and that code_ref's return status into it.
.Ve
.PP
.Vb 5
\&  The return status value "2" is reserved for ioh_foreach()'s use, it
\&  corresponds to the errno error "ENOENT" which is used when there is
\&  no such file or directory.  ioh_foreach() will save this status
\&  value in the status array when it is unable to chdir to the
\&  directory that corresponds to an id.
.Ve
.PP
.Vb 3
\&  use Datastore::MD5;
\&  use Cwd;
\&  use IO::File;
.Ve
.PP
.Vb 1
\&  $ds = new Datastore::MD5("root" => "/tmp/test-me", "depth" => 2);
.Ve
.PP
.Vb 2
\&  $fh = new IO::File;
\&  $fh->open("< CG_LIST") || die "Unable to open CG_LIST";
.Ve
.PP
.Vb 1
\&  $ds->ioh_foreach($fh, \e&doit_toit, \e@status);
.Ve
.PP
.Vb 1
\&  $fh->close() || die "Unable to close CG_LIST";
.Ve
.PP
.Vb 3
\&  print "Errors occured for (ID -- status)\en";
\&  print join "\en", map {"  " . join " -- ",  @{$_}} @status;
\&  print "\en";
.Ve
.PP
.Vb 3
\&  # silly little demo sub that returns an error for any id ending in 9
\&  sub doit_toit {
\&    my($id) = shift;
.Ve
.PP
.Vb 8
\&    print "Working on $id: ", getcwd(), "\en";
\&    if ($id =~ m|.*9|) {
\&      return 1;
\&    }
\&    else {
\&      return 0;
\&    }
\&  }
.Ve
.PP
.Vb 3
\&  Similar results can be achieved for identifier lists that are stored
\&  in various "in-core" datastructures using IO handles created with
\&  the perl objects described in the IO::Stringy man pages.
.Ve
.PP
\fI\f(CI\*(C`iterate\*(C'\fI\fR
.IX Subsection "iterate"
.PP
.Vb 2
\&  This is the deprecated name for C<foreach>.  It's only supported for
\&  backward compatibility.
.Ve
.PP
\fI\f(CI\*(C`rmdir\*(C'\fI\fR
.IX Subsection "rmdir"
.PP
.Vb 1
\&  $success = $ds->rmdir("IDENTIFIER");
.Ve
.PP
.Vb 4
\&  This removes a directory in the datastore that corresponds to the
\&  datastore object $ds.  It runs the system's "rm" command w/ the "-r"
\&  switch via perl's system() function.  Returns a true value if the call
\&  succeeds and a false value on failure.
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
George Hartzell, <hartzell @ fruitfly.org>
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Datastore::MD5, Datastore::CG, perl.
